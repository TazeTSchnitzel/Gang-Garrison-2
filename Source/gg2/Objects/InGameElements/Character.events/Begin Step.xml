<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="1">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">var previnwater, prevheadunderwater;
previnwater = inwater;
prevheadunderwater = headunderwater;
inwater = collision_point(x,y,WaterBox,false,false);
headunderwater = collision_point(x,y-10,WaterBox,false,false);

// set drown countdown if you enter water
if (!prevheadunderwater and headunderwater) {
    drownCountdown = 240;
// querly is immune to drowning
}else if (headunderwater and player.class != CLASS_QUOTE) {
    drownCountdown -= 1;
    // drown
    if (drownCountdown &lt; 0) {
        // "hit" every second
        if (drownCountdown mod 30 == 0) {
            hp -= 10;
            lastDamageSource = DROWN;
            playsound(x,y,DeathSnd1);
        }
    }
// undo 75% of drowning damage
}else if (!headunderwater and prevheadunderwater and drownCountdown &lt; 0) {
    hp += 0.75 * ((0-drownCountdown)/30 * 10);
}

// querly is inside bubble, draw on top of water
// this is kind of a hack but I don't know a better way to do it
if (player.class==CLASS_QUOTE and headunderwater) {
    depth = -11;
}else if (!headunderwater) {
    depth = 0;
}

// non-querlies get "wet" and drip water for a few seconds
if (previnwater and !inwater and player.class!=CLASS_QUOTE) {
    wetCountdown = 180;
}
if (wetCountdown &gt; 0) {
    wetCountdown -= 1;
    if (random(16) &lt; 2) {
        instance_create(x-4+random(4),y-random(6),WaterDrop);
    }   
}

// Apply afterburn
if (burnDuration &gt; 0)
{
    burnDuration -= durationDecay;
    hp -= burnIntensity / 30;
    timeUnscathed = 0;
    if (lastDamageDealer != burnedBy &amp;&amp; lastDamageDealer != player) {
        secondToLastDamageDealer = lastDamageDealer;
        alarm[4] = alarm[3];
    }
    alarm[3] = ASSIST_TIME;
    lastDamageDealer = burnedBy;
    lastDamageSource = afterburnSource;
}
if (alarm[0] == -1 &amp;&amp; burnIntensity &gt; 0) burnIntensity -= intensityDecay;
if (burnDuration &lt;= 0 || burnIntensity &lt;= 0 || inwater)
{
    burnDuration = 0;
    burnIntensity = 0;
    burnedBy = -1;
    afterburnSource = -1;
}
var jumpout;
jumpout = (keyState &amp; $80 and (!inwater and previnwater) and vspeed &lt; 0);
// Handle input
if(!taunting and !omnomnomnom)
{
    if((keyState | pressedKeys) &amp; $10)
        with(currentWeapon) event_user(1);
    if(pressedKeys &amp; $01)  {
        if (!invisible &amp;&amp; cloakAlpha == 1)
            taunting=true;
        if (team==TEAM_RED) {
            tauntindex=0;
            tauntend=tauntlength-1;
        }
        else if (team==TEAM_BLUE) {
            tauntindex=tauntlength;
            tauntend=tauntlength*2-1;
        }
        image_speed=tauntspeed;
    }
    // "swim" upwards if holding down
    if(keyState &amp; $80 and inwater and vspeed &gt; -jumpStrength*0.2) {
        vspeed -= jumpStrength*0.2;
    }
    // (double)jump if pressed
    // or doublejump if holding down and rising out of water
    else if(pressedKeys &amp; $80 or jumpout)
    {
        if(!place_free(x,y+1) and place_free(x,y))
        {
            if(not stabbing)
            {
                playsound(x,y,JumpSnd);
                vspeed = min(vspeed-jumpStrength, -jumpStrength);
            }
        }
        else if(((canDoublejump and !doublejumpUsed) or jumpout) and vspeed &gt; -jumpStrength)
        {
            vspeed = -jumpStrength;
            playsound(x,y,JumpSnd);
            doublejumpUsed = 1;
            moveStatus = 0;
        }
    }
       
}
        
// Right click
if(((keyState | pressedKeys) &amp; $08) and (!taunting or player.class == CLASS_DEMOMAN) and !omnomnomnom)
    with(currentWeapon)
        event_user(2);

// Cloak
if ((pressedKeys &amp; $08) &amp;&amp; canCloak &amp;&amp; ((cloakAlpha &lt;= 0.5 and cloak) || (cloakAlpha == 1 and !cloak)) &amp;&amp; !intel  &amp;&amp; taunting==false &amp;&amp; !(keyState &amp; $10))
    if(currentWeapon.readyToStab) {
        if (cloak) { // stop spies immediately picking up intel after uncloaking
            canGrabIntel=false;
            alarm[1]=30;
        }
        cloak = !cloak;
    }

switch(moveStatus) // moveStatus is reset in collision with obstacles (including doors if they reject you)
{
case 1: //If I am rocketing/mining myself
    controlFactor = 0.65;
    frictionFactor = 1;
    break;
case 2: //If I am rocketing/mining an enemy
    controlFactor = 0.45;
    frictionFactor = 1.05;
    break;
case 3: //Airblast
    controlFactor = 0.35;
    frictionFactor = 1.05;
    break;
case 4: //If I am rocketing/mining a teamate
    controlFactor = baseControl;
    frictionFactor = 1;
    break;
default:
    if(!intel)
        controlFactor = baseControl;
    else
        controlFactor = baseControl-0.1;
    if(inwater)
        controlFactor *= 0.6;
    frictionFactor = baseFriction;
}

if(moveStatus == 1 or moveStatus == 2 or moveStatus == 4)
{
    if !variable_local_exists("jumpFlameParticleType")
    {
        jumpFlameParticleType = part_type_create();
        part_type_sprite(jumpFlameParticleType,FlameS,true,false,true);
        part_type_alpha2(jumpFlameParticleType,1,0.3);
        part_type_life(jumpFlameParticleType,2,5);
        part_type_scale(jumpFlameParticleType,0.7,-0.65);
    }
    vspeed -= 0.06;
    
    if !variable_global_exists("jumpFlameParticleSystem")
    {
        global.jumpFlameParticleSystem = part_system_create();
        part_system_depth(global.jumpFlameParticleSystem, 10);
    }
    
    if(global.particles == PARTICLES_NORMAL)
    {
        if(random(1) &gt; (controlFactor+frictionFactor)/2)
        {
            effect_create_below(ef_smoke,x-hspeed*1.2,y-vspeed*1.2+20,0,c_gray);
        }
    }
    if(global.particles == PARTICLES_NORMAL or global.particles == PARTICLES_ALTERNATIVE)
    {
        if(random(7) &lt; 5)
        {
            part_particles_create(global.jumpFlameParticleSystem,x,y+19,jumpFlameParticleType,1);
        }
    }
}
if(!taunting &amp;&amp; !omnomnomnom)
{
    if((keyState|pressedKeys) &amp; $40 and hspeed &gt; -runPower * controlFactor / (baseFriction - 1))
        hspeed -= runPower*controlFactor;
        
    if((keyState|pressedKeys) &amp; $20 and hspeed &lt; runPower * controlFactor / (baseFriction - 1))
        hspeed += runPower*controlFactor;
}
//divide friction as normal if going way too fast, or controlling motion, based on normal max speed
if(abs(hspeed) &gt; abs(baseControl / (baseFriction - 1) * 2) or
   ((keyState|pressedKeys) &amp; $60 and !(abs(hspeed) &gt; abs(baseControl / (baseFriction - 1)))) )
    hspeed /= baseFriction;
else //otherwise divide by the moveStatus's friction
    hspeed /= frictionFactor;


if(pressedKeys &amp; $04) {
    setChatBubble(player, 45);
}
    
pressedKeys = 0;
releasedKeys = 0;


    
// flame bubble
if burnDuration&gt;0 &amp;&amp; player.class != CLASS_PYRO &amp;&amp; random(80) &lt;= 1 {
    setChatBubble(player, 49);
}

if(abs(hspeed)&lt;0.195 /*and not moveStatus = 3*/) { // Overweight carrying intel and shooting will get stuck with this number much higher
    hspeed=0;
    animationImage=0;
}    
    
// gravity
if(place_free(x,y+1)) {
    if (inwater) {
        vspeed += 0.36;
        if(vspeed&gt;3) {
            vspeed=3;
        }
    }else{
        vspeed += 0.6;
        if(vspeed&gt;10) {
            vspeed=10;
        }
    }
    animationImage = 1;
} else {
    if(place_free(x,y)) {
        doublejumpUsed = 0;
    }
}

if intel { 
    if random(1)&gt;0.90 &amp;&amp; speed&gt;2 {
        var sheet;
        sheet = instance_create(x,y-11+random(9),LooseSheet);
        sheet.hspeed = hspeed;
    }
    if cloak==true {
        cloak=false;
        cloakAplha=1;
    }
}
 
if (player.humiliated)
{
    if (!place_free(x,y+1) &amp;&amp; hspeed == 0)
        animationImage = 0;
    else if place_free(x,y+1)
        animationImage = 2;
    if (!place_free(x,y+1) &amp;&amp; hspeed != 0)
        animationImage = 1+((animationImage-1+abs(hspeed)/20) mod CHARACTER_ANIMATION_LEN);
}
else
    animationImage = (animationImage+abs(hspeed)/20) mod CHARACTER_ANIMATION_LEN;


// drop intel if ubered or round is over
if(intel) &amp;&amp; (ubered || global.mapchanging) {
    event_user(5);
}

//gotta regenerate some nuts
if nutsNBolts &lt; 100 nutsNBolts += 0.1;
else if nutsNBolts &gt; 100 nutsNBolts = 100;

//ubered max out ammo and extinguish flames
if ubered {
    if (burnIntensity &gt; 0 || burnDuration &gt; 0)
    {
        burnIntensity = 0;
        burnDuration = 0;
        burnedBy = -1;
    }
    if instance_exists(currentWeapon) {
        with(currentWeapon) {
            if(variable_local_exists("maxAmmo")) {
                ammoCount = maxAmmo;
            }
            alarm[5] = -1;
        }
    }
}

//give max ammo for players on the winning team
var arenaRoundEnd;
arenaRoundEnd = true;
if instance_exists(ArenaHUD) { 
    if(ArenaHUD.endCount!=0) 
        arenaRoundEnd=true;
    else arenaRoundEnd=false;
}

if (arenaRoundEnd and global.mapchanging and !player.humiliated) {
    if instance_exists(currentWeapon) {
        with(currentWeapon){
            if(variable_local_exists("maxAmmo")) {
                ammoCount = maxAmmo;
            }
            alarm[5] = -1;
        }
    }
}

//drop cloak and unscope if on losing team or stalemate
if (player.humiliated)
{
    if (zoomed)
        toggleZoom(id);
    if (!stabbing)
        cloak = false;
}

// Determine if the character is capturing a CP, and which
var zone;
zone = collision_point(x,y,CaptureZone,0,0);

if(zone&gt;=0 &amp;&amp; !cloak) {
    cappingPoint = zone.cp;
} else {
    cappingPoint = noone;
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
